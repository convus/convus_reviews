# To bump cache:
# Increment & Replace: 'CACHE_V1' in this config

version: 2
jobs:
  build:
    working_directory: ~/convus/convus_reviews
    parallelism: 2
    shell: /bin/bash --login
    environment:
      RAILS_ENV: test
      RACK_ENV: test
      # Inexpicably, circleci uses system time rather than the ActiveSupport::TimeZone configuration
      TZ: /usr/share/zoneinfo/America/Los_Angeles
    docker:
      - image: cimg/ruby:3.1.3-node
        environment:
          PGHOST: 127.0.0.1
          PGUSER: root
          PSQL_PAGER: ''
      - image: cimg/postgres:13.5-postgis
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: convus_reviews_test
          POSTGRES_PASSWORD: ""
      - image: redis:4.0.9
    steps:
      - checkout
      - restore_cache:
          keys:
            # This branch if available
            - CACHE_V1-dep-{{ .Branch }}-
            # Default branch if not
            - CACHE_V1-dep-main-
            # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
            - CACHE_V1-dep-

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1
      - run:
          name: "install system libraries"
          command: sudo apt-get update && sudo apt-get -y install imagemagick postgresql-client
      - run:
          name: "Update Node.js and npm"
          command: |
            curl -sSL "https://nodejs.org/download/release/v18.14.2/node-v18.14.2-linux-x64.tar.xz" | sudo tar --strip-components=2 -xJ -C /usr/local/bin/ node-v18.14.2-linux-x64/bin/node
            curl https://www.npmjs.com/install.sh | sudo bash
      - run:
          name: "install bundler"
          command: gem install bundler
      - run:
          name: "bundle gems"
          command: bundle install --path=vendor/bundle --jobs=4 --retry=3
      # So that we can compile assets, since we use node & yarn
      - run:
          name: "Yarn Install"
          command: yarn install --cache-folder ~/.cache/yarn
      - run:
          name: "Assets: precompile"
          command: |
            set -x
            node --version
            bundle exec rails assets:precompile assets:clean --trace
            rm -rf public/assets
      - run:
          name: "Wait for PostgreSQL to start"
          command: dockerize -wait tcp://localhost:5432 -timeout 1m
      - save_cache:
          key: CACHE_V1-dep-{{ .Branch }}-{{ epoch }}
          paths:
            - ./vendor/bundle
            - ~/.bundle
            - public/assets
            - public/packs
            - public/packs-test
            - tmp/cache/assets/sprockets
            - ~/.cache/yarn
            - ~/.cache/bundle
      - run:
          name: "Lint check"
          command: bin/lint
          environment:
            LINT_TEST: "true"
      - run:
          name: "Setup Database"
          command: |
            bundle exec rails db:create db:schema:load
      - run:
          name: "Rspec tests"
          command: |
            mkdir -p test-results/rspec test-artifacts
            TESTFILES=$(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
            bundle exec rspec --profile 10 \
                              --color \
                              --order random \
                              --format RspecJunitFormatter \
                              --out test-results/rspec/rspec.xml \
                              --format progress \
                              -- ${TESTFILES}
      # - run:
      #     name: "Jest: Tests"
      #     command: |
      #       mkdir -p test-results/junit
      #       yarn test --ci --runInBand --reporters=default --reporters=jest-junit
      #     environment:
      #       JEST_JUNIT_OUTPUT_DIR: "test-results/junit/"
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-artifacts
  deploy_production:
    machine:
      enabled: true
    working_directory: ~/convus/convus_reviews
    steps:
      - checkout
      - run:
          name: "Deploying to Cloud66 production"
          command: |
            curl --insecure -X POST -d "" https://hooks.cloud66.com/stacks/redeploy/${CLOUD66_REDEPLOYMENT_PATH}

workflows:
  version: 2
  commit:
    jobs:
      - build
      - deploy_production:
          requires:
            - build
          filters:
            branches:
              only: main
